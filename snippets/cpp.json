{
  "C++ Header Guard": {
    "prefix": "headerguard",
    "body": [
      "#ifndef ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H",
      "#define ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H",
      "",
      "${0}",
      "",
      "#endif // ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H"
    ],
    "description": "C++ Header Guard"
  },
  "for": {
    "prefix": "for",
    "body": [
      "for (${1:size_t} ${2:i} = ${3:0}; $2 < ${4:length}; $2++) {",
      "\t$0",
      "}"
    ],
    "description": "Code snippet rof 'for' loop"
  },
  "qt_property": {
    "prefix": "qproperty",
    "body": [
      "Q_PROPERTY(${1:PropertyType} ${2:name} READ $2 WRITE set$2 NOTIFY $2Changed);"
    ],
    "description": "Code snippet for 'for' loop"
  },
  "Qt Property Getter Setter": {
    "prefix": "qtproperty",
    "body": [
      "Q_PROPERTY(${2:Type} ${3:propertyName} READ ${3:propertyName} WRITE set${3:propertyName} NOTIFY ${3:propertyName}Changed)",
      "",
      "public:",
      "    ${2:Type} ${3:propertyName}() const { return m_${3:propertyName}; }",
      "    void set${3:propertyName}(${2:Type} value) {",
      "        if (m_${3:propertyName} != value) {",
      "            m_${3:propertyName} = value;",
      "            emit ${3:propertyName}Changed();",
      "        }",
      "    }",
      "",
      "signals:",
      "    void ${3:propertyName}Changed();",
      "",
      "private:",
      "    ${2:Type} m_${3:propertyName};"
    ],
    "description": "Creates a Qt property with getter, setter, and signal."
  },
  "qtmodel": {
    "prefix": "qtmodel",
    "body": [
      "class ${1:className} : public QAbstractListModel {",
      "  Q_OBJECT",
      "  Q_PROPERTY(int count READ rowCount NOTIFY countChanged)",
      "public:",
      "  $1(QObject* parent) : QAbstractListModel(parent) {}",
      "  int rowCount(const QModelIndex &parent = QModelIndex{}) const override;",
      "  QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const override;",
      "  QHash<int, QByteArray> roleNames() const override;",
      "  Q_INVOKABLE void append();",
      "  Q_INVOKABLE void set(int index);",
      "  Q_INVOKABLE void remove(int index);",
      "  Q_SIGNALS:",
      "  void countChanged();",
      "  private:",
      "};"
    ],
    "description": "Code snippet for QAbstractListModel"
  },
  "UnimplementedError": {
    "prefix": "unimpl",
    "body": [
      "return absl::UnimplementedError(fmt::format(\"function {} not implemented\", __PRETTY_FUNCTION__));"
    ]
  }
}
